{
  "name": "soft-eng-junior",
  "nodes": [
    {
      "parameters": {
        "binaryPropertyName": "data0",
        "options": {}
      },
      "id": "4bb3ba5d-b1d7-4c86-bd9c-1e5ae2485ec3",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -120,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map((data) => {\n  let lead = data.json;\n  // Separate first name\n  let splitName = lead.name.split(\" \");\n  // Remove any non-numeric character\n  let phone = lead.phone.replace(/\\D/g, \"\");\n  // Check and add the country prefix if necessary\n  if (!phone.startsWith(\"55\")) phone = \"55\" + phone;\n  // Add 9 to the phone number\n  if (phone.length === 12) phone = phone.slice(0, 4) + \"9\" + phone.slice(4);\n  // Add 0s to the start of the cpf if necessary\n  let cpf = lead.cpf.padStart(11, \"0\");\n  // Format float\n  const releasedValue = parseFloat(lead.released_value).toFixed(2);\n  // Calculate age\n  const [day, month, year] = lead.birthdate.split(\"/\");\n  const birthDate = new Date(year, month - 1, day);\n  const age = new Date().getFullYear() - birthDate.getFullYear();\n\n  return {\n    json: {\n      name: lead.name,\n      first_name: splitName[0],\n      last_name: splitName[splitName.length - 1],\n      cpf: cpf,\n      age: age,\n      phone: phone,\n      birthdate: lead.birthdate,\n      created_at: new Date(),\n      released_value: parseFloat(releasedValue),\n    },\n  };\n});\n"
      },
      "id": "78bb4c5c-2f98-49ed-974f-cf0ec7960092",
      "name": "Format Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        60,
        300
      ],
      "notesInFlow": true,
      "notes": "Formats the CSV fields"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return $input.item.json.body"
      },
      "id": "6bf96210-651d-4d0c-aafe-332eb7b4f5c7",
      "name": "Get Body",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        680
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "path": "search",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "8d92cb46-1a13-497a-848b-0f45674a4947",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -320,
        680
      ],
      "webhookId": "363d85bc-2c2d-4b6e-b55d-72fea659879c",
      "notesInFlow": true,
      "notes": "Receives a GET request with a phone attribute on the request body."
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.isEmpty()}}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0fecc1c5-7314-4b26-ae16-0f84333758ed",
                    "leftValue": "={{$json.isEmpty()}}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "4fe48a0f-60e9-4285-ba32-2a173407219d",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        460,
        580
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lead",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "data"
        }
      },
      "id": "2189b7f6-1bb7-4da6-8b4c-9b2162f188ff",
      "name": "POST Endpoint",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -300,
        300
      ],
      "webhookId": "2d367b15-d6fb-4cb4-9c5b-94e65dbcb7ca",
      "notesInFlow": true,
      "notes": "Receives POST request with CSV file to store on the database."
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"message\": \"Successfuly saved/updated all leads\"\n}",
        "options": {}
      },
      "id": "490d220c-4ced-4134-8525-eb389bd9bb4b",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        420,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200
        }
      },
      "id": "e5e9759f-859a-47a1-a08d-b4281951f036",
      "name": "Success Response1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        660,
        480
      ],
      "notesInFlow": true,
      "notes": "Returns a response with the data found."
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"message\": \"Nenhum lead foi encontrado\"\n}",
        "options": {
          "responseCode": 404
        }
      },
      "id": "601f8eaa-1985-4665-a149-87e772e09565",
      "name": "Not found Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        660,
        660
      ],
      "notesInFlow": true,
      "notes": "Returns a not found message"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"message\": \"Phone number not provided\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "id": "676e61ac-e577-4d92-8783-54007ab9651d",
      "name": "Bad Request Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        260,
        760
      ]
    },
    {
      "parameters": {
        "operation": "findOneAndUpdate",
        "collection": "lead",
        "updateKey": "cpf",
        "fields": "=first_name,last_name,name,birthdate,phone,cpf,released_value,age,created_at",
        "upsert": true,
        "options": {
          "dateFields": "created_at"
        }
      },
      "id": "f1248658-f191-4f78-8269-8dc81d14df9b",
      "name": "Upsert/Update",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "credentials": {
        "mongoDb": {
          "id": "8Jv40dfSF37G6xGo",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "collection": "lead",
        "options": {},
        "query": "={ \"phone\": \"{{ $json.phone }}\"  }"
      },
      "id": "1b64f2f0-efb6-40c0-95f5-b40504ba74ee",
      "name": "Find",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        260,
        580
      ],
      "alwaysOutputData": true,
      "notesInFlow": true,
      "credentials": {
        "mongoDb": {
          "id": "8Jv40dfSF37G6xGo",
          "name": "MongoDB account"
        }
      },
      "notes": "Queries the database for the lead based on the phone received."
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ !$json.phone }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9add5f24-afa1-4fb3-add0-012fa17e2e0d",
                    "leftValue": "={{ !$json.phone }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "1ad9c72c-9a03-4ee0-9946-25d31d106e88",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        60,
        680
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Extract from File": {
      "main": [
        [
          {
            "node": "Format Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Body": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Get Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Success Response1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not found Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Data": {
      "main": [
        [
          {
            "node": "Upsert/Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST Endpoint": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert/Update": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Find",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Bad Request Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "73cbe60d-3036-4316-b6e8-60d644feec9f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "821bc85b567ea5d1f0487912e245b8bc49e0fff29ef7870da069741d50074f81"
  },
  "id": "E6SgAn1Jf1hnLz9A",
  "tags": []
}